
elements = driver.find_elements(By.XPATH, "//span[normalize-space()='Effort Log']")
print(f"Found {len(elements)} elements with text 'Effort Log'")

if elements:
    # Climb up to button (the clickable ancestor) and click
    button = elements[0].find_element(By.XPATH, "./ancestor::button")
    driver.execute_script("arguments[0].click();", button)  # safer than button.click()
else:
    print("Effort Log element not found")




elements = driver.find_elements(By.XPATH, "//span[normalize-space()='Effort Log']")
print(f"Found {len(elements)} elements with text 'Effort Log'")





# Effort Log Handling
try:
    # Click the options menu (3 dots)
    effort_menu_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//smt-button[@class='ng-star-inserted']")))
    driver.execute_script("arguments[0].scrollIntoView(true);", effort_menu_button)
    effort_menu_button.click()

    # Click 'Effort log'
    effort_log_option = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Effort log']")))
    effort_log_option.click()

    # Wait for Effort log dialog to appear
    wait.until(EC.visibility_of_element_located((By.XPATH, "//div[contains(@class,'modal-dialog')]")))

    # Enter effort values
    effort_value = str(random.choice(SPENT_TIMES))
    for testid in ['rx-counter-209', 'rx-counter-217']:
        input_field = wait.until(EC.visibility_of_element_located(
            (By.XPATH, f"//input[starts-with(@data-testid, '{testid}')]")
        ))
        input_field.clear()
        input_field.send_keys(effort_value)

    # Click Add
    add_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Add']")))
    driver.execute_script("arguments[0].scrollIntoView(true);", add_button)
    add_button.click()

    # Close the dialog
    close_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Close']")))
    driver.execute_script("arguments[0].scrollIntoView(true);", close_button)
    close_button.click()

except TimeoutException as e:
    log_file.write(f"{subject} - ERROR in Effort log: Timeout - {str(e)}\n")
except Exception as e:
    log_file.write(f"{subject} - ERROR in Effort log: {str(e)}\n")







from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from exchangelib import Credentials, Account, Configuration, DELEGATE
import datetime, random, time, os

# --- Constants ---
EMAIL = 'shabarinathan.sekar@bofa.com'
CHROMEDRIVER_PATH = r"C:\Users\zkgtvq9\Desktop\py-drivers\chrome\chromedriver-135.exe"
MYITSM_URL = "https://your.myitsm.url"
WORKORDER_FOLDER_NAME = 'workorder'
SPENT_TIMES = [45, 90, 120, 150]
TEMPLATES = ['MAPS GET SRCM Direct Database Update - CSAR']
AITS = ['COMPREHENSIVE SOURCE FOR ANALYTICAL REPORTING']
ASSIGNEE = "S, HAN"
OWNER = "Sekar, Shabarinathan"

# --- Setup Exchange ---
creds = Credentials()  # Replace with secure credential handling
config = Configuration(server='outlook.office365.com', credentials=creds)
account = Account(primary_smtp_address=EMAIL, autodiscover=True, config=config, access_type=DELEGATE)

# --- Log Setup ---
log_folder = "logs"
os.makedirs(log_folder, exist_ok=True)
log_file_path = os.path.join(log_folder, f"workorder_log_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
log_file = open(log_file_path, "w", encoding="utf-8")

# --- Fetch mails ---
folder = account.root.get_folder_by_name('Inbox').get_folder_by_name(WORKORDER_FOLDER_NAME)
items = folder.all().order_by('-datetime_received')

# --- Launch WebDriver ---
service = Service(executable_path=CHROMEDRIVER_PATH)
options = Options()
driver = webdriver.Chrome(service=service, options=options)
wait = WebDriverWait(driver, 30)
action = ActionChains(driver)

try:
    for mail in items:
        subject = mail.subject
        body_lines = mail.text_body.splitlines()
        body = "\n".join(body_lines[:100])  # First 100 lines

        try:
            driver.maximize_window()
            driver.get(MYITSM_URL)
            wait.until(EC.frame_to_be_available_and_switch_to_it((By.ID, "pwa-frame")))

            # Select User
            user_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@placeholder='Enter customer name, email or corporate ID']")))
            user_input.send_keys("S, SHA")
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@role='option']"))).click()

            # Select APS
            wait.until(EC.element_to_be_clickable((By.ID, "rx-select-4"))).click()
            wait.until(EC.element_to_be_clickable((By.XPATH, "//div[text()='APS']"))).click()

            # Set Status to Completed
            wait.until(EC.element_to_be_clickable((By.ID, "rx-select-5"))).click()
            wait.until(EC.element_to_be_clickable((By.XPATH, "//div[normalize-space()='Completed']"))).click()

            # Load Template
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Browse']"))).click()
            search_input = wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@placeholder='Type here to search templates']")))
            search_input.send_keys(TEMPLATES[0], Keys.ENTER)
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Select template']"))).click()

            # Fill Summary
            summary_field = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@placeholder='Summary']")))
            updated_summary = summary_field.get_attribute("value") + " " + subject
            summary_field.clear()
            summary_field.send_keys(updated_summary)

            # Description
            desc_field = driver.find_element(By.XPATH, "//textarea[@placeholder='Description']")
            desc_field.send_keys("\n" + body)

            # Assignee
            assignee_input = driver.find_element(By.XPATH, "//input[@placeholder='Start typing to find an assignee']")
            assignee_input.send_keys(ASSIGNEE)
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@role='option']"))).click()

            # Save Ticket
            try:
                save_button = wait.until(EC.presence_of_element_located((By.XPATH, "//button[.//span[text()='Save']]")))
                driver.execute_script("arguments[0].scrollIntoView(true);", save_button)
                time.sleep(1)
                save_button.click()
            except TimeoutException:
                log_file.write(f"{subject} - ERROR: Timeout on Save button\n")
                continue

            # Wait after save
            time.sleep(10)

            # Effort Log
            wait.until(EC.element_to_be_clickable((By.XPATH, "//smt-button[@class='ng-star-inserted']"))).click()
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Effort log']"))).click()

            effort_value = str(random.choice(SPENT_TIMES))
            for testid in ['rx-counter-209', 'rx-counter-217']:
                input_field = wait.until(EC.visibility_of_element_located((By.XPATH, f"//input[starts-with(@data-testid, '{testid}')]")))
                input_field.clear()
                input_field.send_keys(effort_value)

            wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Add']"))).click()
            wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Close']"))).click()

            # Log success
            log_file.write(f"{subject} - SUCCESS\n")

        except Exception as e:
            log_file.write(f"{subject} - ERROR: {str(e)}\n")

finally:
    log_file.close()
    driver.quit()



Certainly! Here‚Äôs a refined version that reflects **what was done**, **what‚Äôs pending**, and includes the **intended impact** for each activity ‚Äî ideal for sharing with your community or stakeholders:

---

**üåü April Volunteering Activities ‚Äì Work Done & Impact Update üåü**

During April, our volunteers actively participated in a series of hands-on, creative activities focused on education, sustainability, and community welfare. While we‚Äôve completed the creation phase, distribution to beneficiaries (schools, NGOs, and communities) is currently underway. Below is a summary of each activity along with its intended impact:

---

1. **üìñ Bookmark Making**
   ‚úîÔ∏è *Activity Completed:* 200+ handmade bookmarks with positive quotes and colorful designs.
   üéØ *Intended Impact:* To encourage reading habits and bring joy to students in government schools. These bookmarks will soon be distributed during library or reading sessions.

---

2. **üî¨ Science School Project Models**
   ‚úîÔ∏è *Activity Completed:* Simple, engaging science models like water cycle, electric circuits, and solar system crafted using easily available materials.
   üéØ *Intended Impact:* To make learning more visual and interactive for underprivileged school students. These models will support teachers in explaining scientific concepts more effectively.

---

3. **üéÅ Craft for Charity (DIY Earrings & Keychains)**
   ‚úîÔ∏è *Activity Completed:* Dozens of creative earrings and keychains made by volunteers.
   üéØ *Intended Impact:* These handmade crafts will be donated to NGOs to either (1) distribute to underprivileged women and girls to bring smiles or (2) use in fundraising events to support livelihood programs.

---

4. **üé≤ DIY Games (Snake & Ladder, Ludo, Jigsaw Puzzles)**
   ‚úîÔ∏è *Activity Completed:* Multiple board games designed using cardboard and eco-friendly materials.
   üéØ *Intended Impact:* These will be shared with community centers or government schools to promote learning through play, enhance logical thinking, and foster group engagement among children.

---

5. **üñäÔ∏è Paper Pen Making**
   ‚úîÔ∏è *Activity Completed:* 100+ eco-friendly paper pens made to reduce plastic usage.
   üéØ *Intended Impact:* These will be distributed to students and offices to raise awareness on sustainable alternatives and promote eco-conscious habits in daily life.

---

‚ú® **What‚Äôs Next?**
We are now coordinating with partner NGOs and schools to distribute all the crafted items and learning tools. These efforts aim to bring education, sustainability, and joy into the hands of those who need it most.

üíö **Thank you to all the amazing volunteers who made this possible!** Your creativity, effort, and commitment will soon brighten many lives.

---

Let me know if you'd like this turned into a flyer, email format, or visual infographic!
