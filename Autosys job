import os
import shutil
import pandas as pd

# Function to copy files from one folder to another based on a list of filenames
def copy_files_from_excel(excel_file, source_folder, destination_folder):
    data = pd.read_excel(excel_file)
    for index, row in data.iterrows():
        file_name = row[0]  # Assuming file names are in the first column
        source_file_path = os.path.join(source_folder, file_name)
        if os.path.exists(source_file_path):
            destination_file_path = os.path.join(destination_folder, file_name)
            shutil.copy(source_file_path, destination_file_path)
            print(f"File '{file_name}' copied to '{destination_folder}'")
        else:
            print(f"File '{file_name}' does not exist in '{source_folder}'")

# Replace 'excel_file_path' with the path to your Excel file containing the 500 file names
excel_file_path = 'path_to_your_excel_file.xlsx'
# Replace 'source_folder_path' with the path to your source folder containing all 1000 files
source_folder_path = 'path_to_your_source_folder'
# Replace 'destination_folder_path' with the path to the destination folder where you want to copy the files
destination_folder_path = 'path_to_your_destination_folder'

copy_files_from_excel(excel_file_path, source_folder_path, destination_folder_path)








import os

# Function to merge contents of all files into a single file
def merge_files_into_single_file(folder_path, output_file):
    with open(output_file, 'w') as outfile:
        for filename in os.listdir(folder_path):
            file_path = os.path.join(folder_path, filename)
            if os.path.isfile(file_path):
                with open(file_path, 'r') as infile:
                    outfile.write(infile.read())
                    outfile.write('\n')  # Add a newline after each file's content

# Replace 'folder_path' with the path to your folder containing the files
folder_path = 'path_to_your_folder'
# Replace 'output_file' with the desired path and name for the output file
output_file = 'output.txt'

merge_files_into_single_file(folder_path, output_file)








import os

# Function to add a line to a file after a particular line
def add_line_to_file(file_path, line_to_add, after_line):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    with open(file_path, 'w') as file:
        for line in lines:
            file.write(line)
            if after_line in line:
                file.write(line_to_add + '\n')

# Function to read the Excel file and add lines to corresponding files
def add_lines_from_excel(excel_file, folder_path):
    import pandas as pd
    data = pd.read_excel(excel_file)
    for index, row in data.iterrows():
        file_name = row[0]  # Assuming file names are in the first column
        line_to_add = row[1]  # Assuming updated lines are in the second column
        file_path = os.path.join(folder_path, file_name)
        add_line_to_file(file_path, line_to_add, "particular_line")  # Replace "particular_line" with the string after which you want to add the new line

# Replace 'excel_file_path' with the path to your Excel file
excel_file_path = 'path_to_your_excel_file.xlsx'
# Replace 'folder_path' with the path to your folder containing the files
folder_path = 'path_to_your_folder'

add_lines_from_excel(excel_file_path, folder_path)














#!/bin/bash

# Check if the input file exists
if [ ! -f "$1" ]; then
    echo "Input file not found!"
    exit 1
fi

# Create a directory to store job definition files
mkdir -p job_definitions

# Loop through each job name in the input file
while IFS= read -r job_name; do
    # Fetch the job definition and save it to a file
    autorep -J "$job_name" > "job_definitions/${job_name}_definition.txt"
    echo "Job definition for $job_name saved to job_definitions/${job_name}_definition.txt"
done < "$1"

echo "All job definitions saved successfully."
