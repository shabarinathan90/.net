using System;
using System.IO;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NLog;
using NLog.Extensions.Logging;

class Program
{
    static void Main(string[] args)
    {
        var config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
            .Build();

        var logFileName = args[0]; // assuming the log file name is passed as the first argument
        var logFolderPath = config["Logging:LogFolderPath"]; // getting log folder path from appsettings.json

        if (!Directory.Exists(logFolderPath))
        {
            Directory.CreateDirectory(logFolderPath);
        }

        var logFilePath = Path.Combine(logFolderPath, $"{logFileName}_{DateTime.Now:dd-MMM-yyyy}.txt");

        var loggerFactory = LoggerFactory.Create(builder =>
        {
            builder.SetMinimumLevel(LogLevel.Debug);
            builder.AddNLog(config);
        });

        var logger = loggerFactory.CreateLogger<Program>();

        logger.LogInformation("Hello, world!");

        LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection("NLog"));

        var nlogConfig = new NLogProviderOptions
        {
            CaptureMessageTemplates = true,
            CaptureMessageProperties = true
        };

        nlogConfig.AutoLoadColoredConsole = true;
        nlogConfig.AutoReload = true;
        nlogConfig.DefaultCultureInfo = System.Globalization.CultureInfo.CurrentCulture;
        nlogConfig.IgnoreEmptyEventProperties = false;
        nlogConfig.ReplaceExceptionsWithFormattedValue = true;
        nlogConfig.ShutdownOnDispose = true;
        nlogConfig.ThrowConfigExceptions = true;
        nlogConfig.WrappingDefaults = NLogProviderOptions.DefaultWrappingOptions;

        nlogConfig.Targets
            .FindByName("logfile")
            .As<FileTarget>()
            .FileName = logFilePath;

        LogManager.ReconfigExistingLoggers();

        logger.LogInformation($"Logs will be written to {logFilePath}");
    }
}




using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NLog;
using NLog.Extensions.Logging;
using System;
using System.IO;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            var config = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: false)
                .Build();

            var logFilePath = Path.Combine(config["Logging:LogDirectory"], $"{args[0]}_{DateTime.Now:dd-MMM-yyyy}.log");

            LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection("Logging:NLog"));

            var loggerFactory = LoggerFactory.Create(builder =>
            {
                builder.AddNLog(new NLogProviderOptions
                {
                    CaptureMessageTemplates = true,
                    ParseMessageTemplates = true,
                    Name = "Logger",
                    LogLevel = LogLevel.Trace,
                    IncludeScopes = true
                });

                builder.AddConsole();
                builder.SetMinimumLevel(LogLevel.Trace);
            });

            var logger = loggerFactory.CreateLogger("Logger");

            logger.LogInformation("This is a test log message.");

            loggerFactory.Dispose();
        }
    }
}

